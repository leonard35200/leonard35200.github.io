detecterCombatDansParagraphe(id) {
  // Valeur max de vie du h√©ros, fixe ou r√©cup√©r√©e
const vieHeroMax = localStorage.getItem('stat_end');

  const p = document.getElementById(id);
  if (!p) return;

  if (p.innerHTML.includes('<br><br><strong>')) {
    // Supprime une √©ventuelle ancienne fen√™tre de combat
    const old = p.querySelector('.combat-popup');
    if (old) old.remove();

    // R√©cup√®re l'habilet√© et l'endurance du monstre dans le paragraphe
    let vieMonstre = 10;
    let habMonstre = 10;
    const matchEnd = p.innerHTML.match(/ENDURANCE\s*[:|Ôºö]?\s*(\d+)/i);
    if (matchEnd) vieMonstre = parseInt(matchEnd[1], 10);
    const matchHab = p.innerHTML.match(/HABILET[√âE]\s*[:|Ôºö]?\s*(\d+)/i);
    if (matchHab) habMonstre = parseInt(matchHab[1], 10);
    const vieMonstreMax = vieMonstre;
    localStorage.setItem('stat_monstre', vieMonstre);

    // R√©cup√®re ton habilet√©
    let habHero = parseInt(localStorage.getItem('stat_hab'), 10);
    if (isNaN(habHero)) {
      const inputHab = document.getElementById('hab');
      habHero = inputHab ? parseInt(inputHab.value, 10) : 15;
    }
    let habHeroMax = habHero;
    const arme1 = localStorage.getItem('arme1');
const arme2 = localStorage.getItem('arme2');
const possedeAucuneArme = (!arme1 || arme1.trim() === "") && (!arme2 || arme2.trim() === "");



let messageMainNue = "";
if (possedeAucuneArme) {
  habHeroMax -= 2;
  messageMainNue = "‚ö†Ô∏è Combat √† mains nues : -2 HABILET√â";
}


    // Gestion bonus psychiques
    let bonusPsy = 0;
    let messagePsy = '';
    const armesPsy = Object.values(localStorage).some(val => val && val.includes("Puissance psychique"));
    const bouclierPsy = Object.values(localStorage).some(val => val && val.includes("Bouclier psychique"));

    // Gestion bonus Ma√Ætrise des armes
    let bonusArme = 0;
    let armeMaitrisee = localStorage.getItem('arme_maitrisee');
    const disciplineArme = localStorage.getItem('discipline1') === ("Ma√Ætrise des armes (+2 hab. si poss√®de " + armeMaitrisee + ")");
    const armePossedee = [localStorage.getItem('arme1'), localStorage.getItem('arme2')].includes(armeMaitrisee);

    if (disciplineArme && armePossedee) {
      bonusArme = 2;
    }

    // Cr√©ation de la bo√Æte de combat AVANT les barres de vie
    const div = document.createElement('div');
    div.className = 'combat-popup';

    let confirmationHTML = `
      <div style="background:#222; color:#fff; border:2px solid #c00; padding:1em; margin-top:1em; text-align:center; border-radius:12px; box-shadow:0 4px 16px #000a;">
        <div style="font-size:2em; margin-bottom:1em;">COMBAT</div>
    `;

    if (armesPsy) {
      confirmationHTML += `<div id="confirmationPsy" style="margin-bottom:1em;">
        <b>Discipline psychique d√©tect√©e :</b><br>
        <button id="btnPsy2" style="margin:0.5em;">Activer bonus +2</button>
        <button id="btnPsy0" style="margin:0.5em;">Aucun bonus</button>
      </div>`;
    }

    confirmationHTML += `<div id="zoneBarresCombat" style="display:none"></div></div>`;
    div.innerHTML = confirmationHTML;
    p.appendChild(div);

    // Fonction pour afficher les barres de vie et le quotient d'attaque
    const afficherBarres = (bonusPsy, messagePsy, habHeroMax, vieHeroMax) => {
      const quotient = habHeroMax + bonusPsy - habMonstre;
      const vieHero = parseInt(localStorage.getItem('stat_end'), 10) || vieHeroMax;

      let html = `
        <div class="barre-container" style="margin-bottom:10px;">
          <div class="vie-remplissage" id="vieHeroBarre"></div>
          <div class="contenu-barre">
            <div class="coeur" id="iconeHeroVie">‚ù§Ô∏è</div>
            <div class="nom">H√©ros</div>
            <div class="rond-vie" id="vieHeroRestante">${vieHero}</div>
          </div>
        </div>
        <button id="btnHeroMoins2" style="margin-bottom:10px;">-2 H√©ros</button>
        <div class="barre-container" style="margin-bottom:10px;">
          <div class="vie-remplissage" id="vieMonstreBarre"></div>
          <div class="contenu-barre">
            <div class="coeur" id="iconeMonstreVie">üëπ</div>
            <div class="nom">Monstre</div>
            <div class="rond-vie" id="vieMonstreRestante">${vieMonstre}</div>
          </div>
        </div>
        <button id="btnMonstreMoins2">-2 Monstre</button>
<div style="margin-top:1em;font-size:1.2em;">
  Quotient d'attaque : ${quotient} ${messagePsy}<br>
  ${messageMainNue}
</div>
      `;
      div.querySelector('#zoneBarresCombat').innerHTML = html;
      div.querySelector('#zoneBarresCombat').style.display = '';

      const style = document.createElement('style');
      style.textContent = `
        .barre-container {
          position: relative;
          width: 320px;
          height: 38px;
          border-radius: 999px;
          background: #ddd;
          margin-bottom: 10px;
          display: flex;
          align-items: center;
          box-shadow: 0 0 8px rgba(0,0,0,0.2);
          overflow: hidden;
        }
        .vie-remplissage {
          position: absolute;
          height: 100%;
          border-radius: 999px;
          background: linear-gradient(to right, #4e9cff, #b3e6ff);
          transition: width 0.3s;
          z-index: 1;
        }
        .contenu-barre {
          position: relative;
          z-index: 2;
          display: flex;
          align-items: center;
          width: 100%;
          justify-content: space-between;
          color: #222;
          padding: 0 15px;
        }
        .coeur {
          font-size: 22px;
        }
        .nom {
          font-weight: bold;
          font-size: 16px;
        }
        .rond-vie {
          width: 28px;
          height: 28px;
          border-radius: 50%;
          background: white;
          border: 2px solid #999;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
          font-size: 13px;
        }
        #btnHeroMoins2, #btnMonstreMoins2 {
          padding: 6px 14px;
          font-size: 14px;
          cursor: pointer;
          border: none;
          background: #333;
          color: white;
          border-radius: 8px;
          box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
          margin-bottom: 10px;
          margin-left: 0;
        }
        #btnHeroMoins2:hover, #btnMonstreMoins2:hover {
          background: #555;
        }
      `;
      document.head.appendChild(style);

      function majBarre(idBarre, idRond, idIcone, vie, vieMax, iconePleine, iconeVide) {
        const barre = div.querySelector("#" + idBarre);
        const vieText = div.querySelector("#" + idRond);
        const icone = div.querySelector("#" + idIcone);
        if (!barre || !vieText || !icone) return;
        barre.style.width = (vie / vieMax) * 100 + "%";
        vieText.textContent = vie;
        icone.textContent = vie === 0 ? iconeVide : iconePleine;
      }

      let vieHeroCourant = vieHero;
      let vieMonstreCourant = vieMonstre;

      majBarre("vieHeroBarre", "vieHeroRestante", "iconeHeroVie", vieHeroCourant, vieHeroMax, "‚ù§Ô∏è", "üíÄ");
      majBarre("vieMonstreBarre", "vieMonstreRestante", "iconeMonstreVie", vieMonstreCourant, vieMonstreMax, "üëπ", "üíÄ");

      div.querySelector("#btnHeroMoins2").onclick = () => {
        vieHeroCourant = Math.max(0, vieHeroCourant - 2);
        majBarre("vieHeroBarre", "vieHeroRestante", "iconeHeroVie", vieHeroCourant, vieHeroMax, "‚ù§Ô∏è", "üíÄ");
        localStorage.setItem('stat_end', vieHeroCourant);
        const inputEnd = document.getElementById('end');
        if (inputEnd) inputEnd.value = vieHeroCourant;
      };

      div.querySelector("#btnMonstreMoins2").onclick = () => {
        vieMonstreCourant = Math.max(0, vieMonstreCourant - 2);
        majBarre("vieMonstreBarre", "vieMonstreRestante", "iconeMonstreVie", vieMonstreCourant, vieMonstreMax, "üëπ", "üíÄ");
        localStorage.setItem('stat_monstre', vieMonstreCourant);
      };
    };

    // === Ajout des listeners pour boutons psy ===
    if (armesPsy) {
      const btn2 = div.querySelector("#btnPsy2");
      const btn0 = div.querySelector("#btnPsy0");

      if (btn2) {
        btn2.onclick = () => {
          const confirmationDiv = div.querySelector("#confirmationPsy");
          if (confirmationDiv) confirmationDiv.remove();
          div.querySelector("#zoneBarresCombat").style.display = "";
          afficherBarres(2, "(Psychique)", habHeroMax, vieHeroMax);
        };
      }
      if (btn0) {
        btn0.onclick = () => {
          const confirmationDiv = div.querySelector("#confirmationPsy");
          if (confirmationDiv) confirmationDiv.remove();
          div.querySelector("#zoneBarresCombat").style.display = "";
          afficherBarres(0, "", habHeroMax, vieHeroMax);
        };
      }
    } else {
      // Pas de discipline psy, on affiche directement les barres
      afficherBarres(0, "", habHeroMax, vieHeroMax);
    }
  }
}